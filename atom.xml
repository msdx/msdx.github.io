<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疯狂的键盘</title>
  
  <subtitle>浩码农的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://githang.com/"/>
  <updated>2018-08-22T01:55:45.242Z</updated>
  <id>http://githang.com/</id>
  
  <author>
    <name>浩码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 drawable 资源中使用属性引用的兼容问题</title>
    <link href="http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/"/>
    <id>http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/</id>
    <published>2018-08-21T06:52:03.000Z</published>
    <updated>2018-08-22T01:55:45.242Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在 Buly 崩溃分析里看到一个之前没见过的异常，异常信息为 &lt;code&gt;Can&amp;#39;t convert to color: type=0x2&lt;/code&gt;。详细日志如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.RuntimeException:Unable to start activity ComponentInfo&amp;#123;com.parkingwang.iop/com.parkingwang.iop.home.HomeActivity&amp;#125;: android.view.InflateException: Binary XML file line #79: Error inflating class TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2366)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.UnsupportedOperationException:Can&amp;apos;t convert to color: type=0x2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getColor(TypedArray.java:327)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.GradientDrawable.inflate(GradientDrawable.java:970)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXmlInner(Drawable.java:937)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXml(Drawable.java:877)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.Resources.loadDrawable(Resources.java:2206)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getDrawable(TypedArray.java:602)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.widget.TextView.&amp;lt;init&amp;gt;(TextView.java:854)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.support.v7.widget.AppCompatTextView.&amp;lt;init&amp;gt;(TbsSdkJava)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="颜色属性" scheme="http://githang.com/tags/%E9%A2%9C%E8%89%B2%E5%B1%9E%E6%80%A7/"/>
    
      <category term="兼容性" scheme="http://githang.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>感慨</title>
    <link href="http://githang.com/2018/08/18/Filling/"/>
    <id>http://githang.com/2018/08/18/Filling/</id>
    <published>2018-08-18T06:46:07.000Z</published>
    <updated>2018-08-20T13:34:37.562Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们以不同的方式在同一个地方共同地努力，却因为起跑线的不同而得到不同的结果。&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="随笔" scheme="http://githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://githang.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 多分支构建中的邮件配置</title>
    <link href="http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/"/>
    <id>http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/</id>
    <published>2018-08-15T15:42:50.000Z</published>
    <updated>2018-08-17T03:40:27.838Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的《Jenkins 多分支构建》解决了多分支项目的构建问题，但是却漏了一个问题，那就是邮件通知。&lt;br&gt;作为开发，我们的主要精力是集中在开发实现上，所以也不能每次推完代码之后都去等着看构建结果，我们需要在构建失败的时候，Jenkins 能够通知我们去处理，所以邮件配置是不可少的。&lt;br&gt;在简单的 Freestyle 项目中，我们可以进行如下配置：&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="email" scheme="http://githang.com/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>微知识#1 Kotlin 的 @JvmStatic 和 @JvmField 注解</title>
    <link href="http://githang.com/2018/08/12/Micro-Knowledge-1/"/>
    <id>http://githang.com/2018/08/12/Micro-Knowledge-1/</id>
    <published>2018-08-11T16:51:35.000Z</published>
    <updated>2018-08-15T02:16:56.811Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是关于 Java 静态方法和静态变量的一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestStatic&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; otherField = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BigInteger BIG_INTEGER = BigInteger.ONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;call method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们把它转换成 Kotlin 代码，会得到这样的结果：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>微知识#0 layoutInflater.inflate 方法的 ViewGroup 参数</title>
    <link href="http://githang.com/2018/08/10/Micro-Knowledge-0/"/>
    <id>http://githang.com/2018/08/10/Micro-Knowledge-0/</id>
    <published>2018-08-10T14:14:25.000Z</published>
    <updated>2018-08-11T07:21:37.568Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;LayoutInflater&lt;/code&gt; 常用的两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; attachToRoot)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个方法的调用如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inflate(resource, root, root != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在其实现中，第二个参数 &lt;code&gt;ViewGroup&lt;/code&gt; 类型的 &lt;code&gt;root&lt;/code&gt; 是否为空，会决定在从布局文件创建 &lt;code&gt;View&lt;/code&gt; 的时候，是否生成根元素的布局参数（即以 &lt;code&gt;layout_&lt;/code&gt; 开头的属性），关键代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 多分支构建</title>
    <link href="http://githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/"/>
    <id>http://githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/</id>
    <published>2018-08-09T07:22:57.000Z</published>
    <updated>2018-08-09T08:18:54.174Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天终于搞定了 Jenkins 的多分支构建的配置。&lt;/p&gt;
&lt;p&gt;以前在使用 gitlab-ci 时，可以根据不同的分支执行不同的构建，比如 release 分支执行发布到 fir 上的构建，其他分支只执行编译。但因为服务器上的 4G 内存还要跑其他服务，而 gitlab 又是个耗内存大户，经常报 5xx 错误而不得不重启（我后来不得不使用 cron 设置了隔几天自动重启的定时任务）。之后想起了一个 go 开发的 git 托管服务 gogs，于是老大把它给部署上，将项目从 gitlab 上迁移过来。&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="Pipeline" scheme="http://githang.com/tags/Pipeline/"/>
    
      <category term="Multibranch" scheme="http://githang.com/tags/Multibranch/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Java 互通指南</title>
    <link href="http://githang.com/2018/08/06/Kotlin-Java-Interop-Guide/"/>
    <id>http://githang.com/2018/08/06/Kotlin-Java-Interop-Guide/</id>
    <published>2018-08-06T14:06:22.000Z</published>
    <updated>2018-08-07T03:00:48.404Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://android.github.io/kotlin-guides/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Kotlin Guides&lt;/a&gt; 的 &lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interop Guide&lt;/a&gt;，翻译项目地址为：&lt;a href=&quot;https://github.com/msdx/kotlin-guides-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/msdx/kotlin-guides-cn&lt;/a&gt; ，欢迎关注及校正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一组关于使用 Java 和 Kotlin 语言编写公共 API 的规则，目的是让代码在其他语言使用时也会感到习惯。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更新于：2018-05-18&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
      <category term="Java" scheme="http://githang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Kotlin 风格指南</title>
    <link href="http://githang.com/2018/08/06/Android-Kotlin-Style-Guides/"/>
    <id>http://githang.com/2018/08/06/Android-Kotlin-Style-Guides/</id>
    <published>2018-08-06T01:45:47.000Z</published>
    <updated>2018-08-06T14:21:32.153Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://android.github.io/kotlin-guides/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Kotlin Guides&lt;/a&gt; 的 &lt;a href=&quot;https://android.github.io/kotlin-guides/style.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Style Guide&lt;/a&gt;，翻译项目地址为：&lt;a href=&quot;https://github.com/msdx/kotlin-guides-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/msdx/kotlin-guides-cn&lt;/a&gt; ，欢迎关注及校正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文档是 Google Android 编码标准的 Kotlin 代码标准。当且仅当一个 Kotlin 源文件符合这里的规则时，我们就称其为 Google Android 代码风格的源文件。&lt;/p&gt;
&lt;p&gt;与其他的编程风格指南一样，这里所涉及的问题不仅包括格式化的美观问题，也涉及了其他的约定及编码标准。但是，本文档主要关注我们普遍遵循的硬性规定，并避免给出不明确可执行（无论是通过人工还是工具）的建议。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更新于：2018-05-18&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
      <category term="CodeStyle" scheme="http://githang.com/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>使用 Drawable 实现图标角标</title>
    <link href="http://githang.com/2018/06/22/BadgeDrawable/"/>
    <id>http://githang.com/2018/06/22/BadgeDrawable/</id>
    <published>2018-06-22T06:24:27.000Z</published>
    <updated>2018-07-28T00:15:47.435Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我在去年曾经写过一篇类似的《使用 Drawable 实现小红点》，但是小红点的具体实现是在这个类里面的。这次是在其思路上进行扩展，使得小红点或者说是角标的样式更加灵活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在一些图标的右上角添加小红点，是我们开发中很常见的场景，比如下图所示，底部 TAB 会有小红点，上面的功能图标也会有小红点。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="drawable" scheme="http://githang.com/tags/drawable/"/>
    
      <category term="角标" scheme="http://githang.com/tags/%E8%A7%92%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Phabricator 添加对 Kotlin 的语法高亮</title>
    <link href="http://githang.com/2018/05/15/Phabricator-Pygments-Kotlin-Syntax-Highlight/"/>
    <id>http://githang.com/2018/05/15/Phabricator-Pygments-Kotlin-Syntax-Highlight/</id>
    <published>2018-05-15T03:44:26.000Z</published>
    <updated>2018-05-15T12:06:44.459Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一直难以忍受在做 Code Review 时，Phabricator 无法对 kotlin 代码进行高亮显示，直到今天项目的阶段性开发终于告一段落进入测试，于是着手处理该问题。&lt;/p&gt;
&lt;p&gt;Phabricator 对语法高亮有两种支持方式，一种是其自带的高亮，还是一种是对 pygments 的集成。在 Phabricator 的设置界面上提到，如果想支持更多种语言的语法高亮，可以启用 pygments，于是我就配置为使用 pygments。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Phabricator" scheme="http://githang.com/tags/Phabricator/"/>
    
  </entry>
  
  <entry>
    <title>皮肤包项目的 Gradle 脚本演化</title>
    <link href="http://githang.com/2018/04/11/The-Evolution-of-The-Gradle-Script-For-The-Skin-Library/"/>
    <id>http://githang.com/2018/04/11/The-Evolution-of-The-Gradle-Script-For-The-Skin-Library/</id>
    <published>2018-04-11T06:02:17.000Z</published>
    <updated>2018-04-11T23:37:25.037Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在做的一个项目需要有换肤功能，换肤的方案是采用第三方库 &lt;a href=&quot;https://github.com/burgessjp/ThemeSkinning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThemeSkinning&lt;/a&gt; 的实现（在其基础上修复若干 bug）。皮肤的制作是把相关的资源放在一个 app module 中打包成 apk，当然资源的命名要和原有项目中的命名一致。目前的皮肤加载方式，是把皮肤包放到 assets 中去加载。这是背景一。&lt;br&gt;背景二，这个项目是我所接手过来的。虽然表面上是使用了皮肤加载库，但是项目中还有大量遗留的没有使用皮肤库的写死的代码，都是判断当前主题是哪一个，然后返回默认资源或者是指定皮肤的资源。这些代码都类似如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://githang.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>关于第一工场的设想</title>
    <link href="http://githang.com/2018/04/08/First-Technical-Works/"/>
    <id>http://githang.com/2018/04/08/First-Technical-Works/</id>
    <published>2018-04-08T15:21:29.000Z</published>
    <updated>2018-04-08T15:42:37.988Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上周突发奇想，写了篇关于研发团队第一工场的设想。但写到一半，又觉得是在胡说八道——或者说过于理想化，于是又不想发了，故又对文章拍照记录。今晚又觉得这种天马行空对我而言较为难得，因此便把记录图片发上来。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://githang.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>被固化的思维</title>
    <link href="http://githang.com/2018/03/11/Solidified-Thinking/"/>
    <id>http://githang.com/2018/03/11/Solidified-Thinking/</id>
    <published>2018-03-11T01:14:34.000Z</published>
    <updated>2018-03-11T14:47:58.778Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我是在元旦之时意识到发生在我身上的这个严峻的问题的。&lt;/p&gt;
&lt;p&gt;那时跟我家橙子及她朋友们一赶快到佛山玩几天，最后一天是回到广州去了一个地方摘草莓。当时我和小橙子一组，他们一对一组，摘了一会儿我就停下来了。&lt;br&gt;我望着面前一排排田垄，不禁停下来思考一个问题：我站在一条沟槽中，可以摘两边也就是两排的草莓；把这个草莓园视为一个二维数组，每个元素上都可能会有我们想摘的草莓，那么摘完所有的草莓其实就是把这个二维数组遍历一遍。而实际上，我们不是果农，我们也不会摘下所有成熟的草莓，我们可能只是摘个两三斤就满足了，所以问题是如何以最短的路径遍历尽可能多的元素。说到这里，那么答案也很简单，“之”字形走一遍就好了。但其实条件不仅仅是这样，我们要考虑最优解，也就是尽可能地优化这个结果，那么就得考虑到我们目标完成之后所处的位置应离出口尽可能的近。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>深踩 AndroidStudio 缓存的坑</title>
    <link href="http://githang.com/2018/03/07/Bug-of-AndroidStudio-Cache/"/>
    <id>http://githang.com/2018/03/07/Bug-of-AndroidStudio-Cache/</id>
    <published>2018-03-07T09:20:11.000Z</published>
    <updated>2018-03-08T02:03:03.580Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文记录的是今天在群里提到的昨天所踩的一个坑，有关 AndroidStudio 缓存的。&lt;/p&gt;
&lt;p&gt;先说一下背景。&lt;br&gt;我负责的一个项目，对一个图表库有外部依赖。这个图表库是我在维护的，由于新功能在开发中，所以我就使用了 SNAPSHOT 版本发布到 OJO(oss.jfrog.org) 上。我在项目中刚更新了依赖，忽然想到还少几个 API，于是发布了 SNAPSHOT 版本。&lt;br&gt;故事就这样开始了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="bug" scheme="http://githang.com/tags/bug/"/>
    
      <category term="AndroidStudio" scheme="http://githang.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>惠州西湖行</title>
    <link href="http://githang.com/2018/02/15/Huizhou-West-Lake-Tour/"/>
    <id>http://githang.com/2018/02/15/Huizhou-West-Lake-Tour/</id>
    <published>2018-02-15T08:52:00.000Z</published>
    <updated>2018-02-17T02:15:06.343Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于忽得消息，年前部门提前休假，于是心血来潮之下，未作过多准备，便临时决定和小橙子去周边城市惠州走走。&lt;br&gt;我们于上午坐客车至惠州总站，车站离此次的目的地西湖不远，于是便入住于车站附近的如家酒店，下午小憩，再游西湖。&lt;br&gt;橙子易饿，出了酒店，先是去了一家甜品店，然后再折回西湖。&lt;br&gt;
    
    </summary>
    
      <category term="游记" scheme="http://githang.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="旅游" scheme="http://githang.com/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="惠州" scheme="http://githang.com/tags/%E6%83%A0%E5%B7%9E/"/>
    
  </entry>
  
  <entry>
    <title>你来了呀</title>
    <link href="http://githang.com/2018/02/11/You-Are-Here/"/>
    <id>http://githang.com/2018/02/11/You-Are-Here/</id>
    <published>2018-02-10T16:59:46.000Z</published>
    <updated>2018-02-10T17:36:16.143Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;就在那不经意间，从列表里看到了一个人名，仿佛许久都未曾记起。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我回到大学，重过带有抱憾的生活。&lt;br&gt;我拖着行李，独自回到宿舍。宿舍里早已回来三人，我打着招呼，放下行李箱，爬上了自己的床位，仿佛想一睡三年。&lt;br&gt;我又绕着操场跑圈，旁边不知还有谁在一直跑，我想，这次跑步应该能坚持下来。&lt;br&gt;我赤着脚走到了泳池边，看着湛蓝的池水似有一米来高，仍是心中忐忑。我想了想，这是在梦里呢，又有何惧呢，于是我下水了。我在水中走，时而走在水下，时而探出水面。我仿佛对水免疫了，但我仍是呛到了几口水。&lt;br&gt;
    
    </summary>
    
      <category term="拾梦者" scheme="http://githang.com/categories/%E6%8B%BE%E6%A2%A6%E8%80%85/"/>
    
    
      <category term="梦" scheme="http://githang.com/tags/%E6%A2%A6/"/>
    
  </entry>
  
  <entry>
    <title>对读取短信验证码封装库的思考</title>
    <link href="http://githang.com/2018/02/03/Sms-Captcha/"/>
    <id>http://githang.com/2018/02/03/Sms-Captcha/</id>
    <published>2018-02-03T12:22:23.000Z</published>
    <updated>2018-02-04T00:32:36.907Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在我的目前阶段，许多开源项目的产生都是直接来源于项目本身的需求，比如这次要讲的读取短信验证码的封装库。&lt;/p&gt;
&lt;p&gt;项目目前挂在 github 上的公司组织下，地址为：&lt;a href=&quot;https://github.com/parkingwang/sms-captcha&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/parkingwang/sms-captcha&lt;/a&gt;。使用方法很简单，在界面创建时注册：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mCaptchaObserver = SmsCaptcha.with(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .captchaLength(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .addressLike(&lt;span class=&quot;string&quot;&gt;&quot;10657%&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .fillTo(mSmsCode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .createAndRegister();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;界面销毁时移除注册：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mCaptchaObserver.unregister();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="captcha" scheme="http://githang.com/tags/captcha/"/>
    
  </entry>
  
  <entry>
    <title>一个动态权限库的设计</title>
    <link href="http://githang.com/2018/01/09/The-Design-of-HeyPermission/"/>
    <id>http://githang.com/2018/01/09/The-Design-of-HeyPermission/</id>
    <published>2018-01-09T13:41:37.000Z</published>
    <updated>2018-01-13T01:39:06.698Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在经过上一次尝试剖析源码后，我意识到自己并没有一种比较好的方式去讲解代码，从而无法把自己所知道的知识更好地输出。所以接下来，至少在源码讲解有新想法前，我都不会再去尝试，也尽量减少博客中的非核心代码，而以思路及想法为主。另外，我也将尝试改进技术博客的笔法，段落之间尽量连贯，整体内容尽量有节奏感，目标是做到深入浅出地表达出主题相关内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 Android 6.0（API 23）开始，用户可以在应用运行时向其授予权限（6.0 以下，国内厂商也多数做了类似的权限管理），而不是在应用安装时授予。这一方法既可以简化应用的安装过程，也可以让用户对应用的功能进行更多的限制。&lt;/p&gt;
&lt;p&gt;在 Android 系统中，系统权限分为两类：正常权限以及危险权限。其中正常权限是不会直接给用户隐私权带来风险的，如果应用在其清单中声明了该权限，则系统会自动授予该权限。而危险权限，从 6.0 开始，而需要应用动态申请，并且由用户授予。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="runtime-permission" scheme="http://githang.com/tags/runtime-permission/"/>
    
  </entry>
  
  <entry>
    <title>2017 年总结</title>
    <link href="http://githang.com/2018/01/05/Summary-of-2017/"/>
    <id>http://githang.com/2018/01/05/Summary-of-2017/</id>
    <published>2018-01-05T03:52:25.000Z</published>
    <updated>2018-01-17T11:19:02.278Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;虽是迟了几天，但总归是有了总结了。回顾过去一年，分几个方面概括一下。&lt;/p&gt;
&lt;h1 id=&quot;个人&quot;&gt;&lt;a href=&quot;#个人&quot; class=&quot;headerlink&quot; title=&quot;个人&quot;&gt;&lt;/a&gt;个人&lt;/h1&gt;&lt;h2 id=&quot;开源&quot;&gt;&lt;a href=&quot;#开源&quot; class=&quot;headerlink&quot; title=&quot;开源&quot;&gt;&lt;/a&gt;开源&lt;/h2&gt;&lt;h3 id=&quot;以前的开源项目&quot;&gt;&lt;a href=&quot;#以前的开源项目&quot; class=&quot;headerlink&quot; title=&quot;以前的开源项目&quot;&gt;&lt;/a&gt;以前的开源项目&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msdx/status-bar-compat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;status-bar-compat&lt;/code&gt;&lt;/a&gt; 在过去几个月的 star 量有些增幅，目前已过 400，算是我那些小打小闹的开源项目中 star 量最多的一个。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msdx/fir-publisher&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;fir-publisher&lt;/code&gt;&lt;/a&gt; 发布到 fir 的一个 Gradle 插件，简单，轻量，新增了对 Android Gradle 3.0 的支持，目前仍是仅公司内部使用的状态。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>跳一跳——电脑能做的事就不要人工来做啦</title>
    <link href="http://githang.com/2017/12/30/Auto-Jump/"/>
    <id>http://githang.com/2017/12/30/Auto-Jump/</id>
    <published>2017-12-30T12:56:22.000Z</published>
    <updated>2018-01-05T03:43:51.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;几年前参考网上的文章写过天天连萌自动玩的项目（之前写在 iteye 的博客上：&lt;a href=&quot;http://maosidiaoxian.iteye.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://maosidiaoxian.iteye.com&lt;/a&gt;，github 项目地址为：&lt;a href=&quot;https://github.com/GameTerminator/lianmeng&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/GameTerminator/lianmeng&lt;/a&gt;），这次微信小游戏里的跳一跳玩了玩，就自然而然地想到用同样的方式来做。&lt;/p&gt;
&lt;p&gt;经过几次修正和简化，最终思路和实现如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="monkey" scheme="http://githang.com/tags/monkey/"/>
    
  </entry>
  
</feed>
