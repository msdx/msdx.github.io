<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疯狂的键盘</title>
  
  <subtitle>浩码农的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://githang.com/"/>
  <updated>2019-01-16T06:48:14.752Z</updated>
  <id>http://githang.com/</id>
  
  <author>
    <name>浩码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkinsfile的pipeline配置</title>
    <link href="http://githang.com/2019/01/16/Jenkinsfile-pipeline/"/>
    <id>http://githang.com/2019/01/16/Jenkinsfile-pipeline/</id>
    <published>2019-01-16T01:47:08.000Z</published>
    <updated>2019-01-16T06:48:14.752Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我之前的博客《&lt;a href=&quot;http://www.githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jenkins 多分支构建&lt;/a&gt;》及《&lt;a href=&quot;http://www.githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jenkins 多分支构建中的邮件配置&lt;/a&gt;》探索了在多分支构建中Jenkinsfile的配置。然而在我的配置中，根节点为&lt;code&gt;node&lt;/code&gt;，但里面却没有使用Jenkinsfile的DSL去声明构建的流程，而是通过groovy代码去实现整个的构建逻辑，用&lt;code&gt;try-catch&lt;/code&gt;处理构建失败的问题，看起来很混乱。并且，整个构建本来有拉取并检出代码、构建、发布这几个阶段，但是在Jenkinsfile里却没有体现出来，所以当发现构建较慢时也不利于定位问题所在的步骤。本篇文章将完全处理这些问题。&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="Pipeline" scheme="http://githang.com/tags/Pipeline/"/>
    
      <category term="Jenkinsfile" scheme="http://githang.com/tags/Jenkinsfile/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin，走起 [0]=开篇</title>
    <link href="http://githang.com/2019/01/11/kotlin-0/"/>
    <id>http://githang.com/2019/01/11/kotlin-0/</id>
    <published>2019-01-11T09:21:34.000Z</published>
    <updated>2019-01-15T04:04:20.569Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Kotlin，是由JetBrains开发的一种在Java虚拟机上运行的静态类型编程语言……&lt;br&gt;关于Kotlin的背景，看到这篇文章的你想必在其他地方已多次看到介绍，这里就不赘述了。&lt;br&gt;阅前须知：本系列文章需要一定的Java基础知识，并且所举的例子可能会包含些Android上的代码，比较适合之前使用Java从事Android开发的朋友。&lt;br&gt;下面进入正题。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
      <category term="Kotlin走起" scheme="http://githang.com/tags/Kotlin%E8%B5%B0%E8%B5%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何编写优雅的代码</title>
    <link href="http://githang.com/2019/01/04/how-to-write-elegant-code/"/>
    <id>http://githang.com/2019/01/04/how-to-write-elegant-code/</id>
    <published>2019-01-04T09:04:05.000Z</published>
    <updated>2019-01-11T03:03:07.127Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我对优雅的代码的理解是：遵守规范，逻辑清晰，严谨可靠，化繁为简。本文分享我对写代码的一些思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码首先是写给人看的，其次才是计算机顺便能够运行&quot;&gt;&lt;a href=&quot;#代码首先是写给人看的，其次才是计算机顺便能够运行&quot; class=&quot;headerlink&quot; title=&quot;代码首先是写给人看的，其次才是计算机顺便能够运行&quot;&gt;&lt;/a&gt;代码首先是写给人看的，其次才是计算机顺便能够运行&lt;/h2&gt;&lt;p&gt;在讨论关于如何编写优雅代码的观点之前，先抛出个问题，希望我们对这一点能够达成共识：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要编写优雅的代码？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="代码" scheme="http://githang.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>2018年总结</title>
    <link href="http://githang.com/2019/01/01/summary-of-2018/"/>
    <id>http://githang.com/2019/01/01/summary-of-2018/</id>
    <published>2019-01-01T04:17:11.000Z</published>
    <updated>2019-01-01T09:56:27.484Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;没有完成的计划&quot;&gt;&lt;a href=&quot;#没有完成的计划&quot; class=&quot;headerlink&quot; title=&quot;没有完成的计划&quot;&gt;&lt;/a&gt;没有完成的计划&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;编程语言学习。依然没有完成2018年所设想的2017年所计划的在2016年没有完成的2015年所定下的学习Python的目标。另外，Kotlin语言用起来总体感觉很爽，如果说有什么不爽的地方，那大概是在写反射代码的时候了。&lt;/li&gt;
&lt;li&gt;运动。由于生病的原因，不但2018年没能成功继续运动，接下来的半年也无法进行运动，很遗憾。希望能早点恢复之前状态。&lt;/li&gt;
&lt;li&gt;交流语言学习。粤语学习依旧半途而废。&lt;/li&gt;
&lt;li&gt;电话。还得多多自我督促。&lt;/li&gt;
&lt;li&gt;回家。经济压力之大，竟连出远门的钱也似乎腾不出了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来是新篇。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>我为什么放弃在项目中使用Data Binding</title>
    <link href="http://githang.com/2018/12/25/why-do-i-discard-data-binding-in-project/"/>
    <id>http://githang.com/2018/12/25/why-do-i-discard-data-binding-in-project/</id>
    <published>2018-12-25T05:30:30.000Z</published>
    <updated>2018-12-30T19:57:09.914Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是怎么开始去使用它的&quot;&gt;&lt;a href=&quot;#我是怎么开始去使用它的&quot; class=&quot;headerlink&quot; title=&quot;我是怎么开始去使用它的&quot;&gt;&lt;/a&gt;我是怎么开始去使用它的&lt;/h1&gt;&lt;h2 id=&quot;开始使用它的原因&quot;&gt;&lt;a href=&quot;#开始使用它的原因&quot; class=&quot;headerlink&quot; title=&quot;开始使用它的原因&quot;&gt;&lt;/a&gt;开始使用它的原因&lt;/h2&gt;&lt;p&gt;Data Binding出现也有几年了，一直没有去用它的主要原因是它的写法让我觉得会把业务逻辑与界面过度耦合在一起。但前段时间还是试用了一下。&lt;/p&gt;
&lt;p&gt;会想去用它一共有四个原因。&lt;br&gt;一是说到底没有用过，感觉如果与他人讨论到它难免有空谈的心虚感，&lt;strong&gt;毕竟一项技术是好是坏还是使用过后再去评论比较有底气&lt;/strong&gt;。&lt;br&gt;二是想先引入Data Binding，再在项目中结合它尝试MVVM模式，毕竟Data Binding的使用方式看起来与MVVM相当的切合。
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="DataBinding" scheme="http://githang.com/tags/DataBinding/"/>
    
  </entry>
  
  <entry>
    <title>如何在Hexo中对文章md文件分类</title>
    <link href="http://githang.com/2018/12/22/hexo-new-post-path/"/>
    <id>http://githang.com/2018/12/22/hexo-new-post-path/</id>
    <published>2018-12-22T04:57:21.000Z</published>
    <updated>2018-12-23T02:01:50.971Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一个快速、简洁且高效的博客框架，常用在Github Page上部署个人博客。&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;在默认配置下，我们使用&lt;code&gt;hexo new post [title]&lt;/code&gt;会在&lt;code&gt;source/_post/&lt;/code&gt;目录下生成对应的markdown文件，而使用&lt;code&gt;hexo g&lt;/code&gt;生成的html文件路径是&lt;code&gt;:year/:month/:day/:title.html&lt;/code&gt;。当我们写的博客越来越多的时候，会发现，所有文章都是在&lt;code&gt;source/_post/&lt;/code&gt;下，查找起来会不大方便，而希望对它进行一个分类，但是在生成的文章链接上保持不变。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://githang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>统计项目中的代码有多少行是你贡献的</title>
    <link href="http://githang.com/2018/12/21/Git-Contribution-Statistics/"/>
    <id>http://githang.com/2018/12/21/Git-Contribution-Statistics/</id>
    <published>2018-12-21T02:03:01.000Z</published>
    <updated>2018-12-21T02:03:01.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇内容仅对 Linux/Mac 友好，Windows 开发者请勿介意。&lt;/p&gt;
&lt;p&gt;在一个有多人参与过的项目中，不知道其他人有没有和我一样会去想：当前这个项目有多少行代码是我写的，有多少行代码是其他人写的？&lt;/p&gt;
&lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;p&gt;我们知道，&lt;code&gt;git blame&lt;/code&gt; 的命令可以查看一个文件的每一行代码的最终修改者，如下：&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://githang.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://githang.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>读《高效15法则》</title>
    <link href="http://githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/"/>
    <id>http://githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/</id>
    <published>2018-12-18T06:59:07.000Z</published>
    <updated>2018-12-18T06:59:07.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《高效15法则》是我大概五个月前读的一本讲时间管理的书。如果你也有和我一样困惑于掌控自己的时间精力时，建议也看一看有关时间管理或精力管理的书，其中《高效15法则》这本书是我觉得讲得还很不错的。&lt;/p&gt;
&lt;p&gt;15条法则总结如下：&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="读书" scheme="http://githang.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Scientific Internet Access</title>
    <link href="http://githang.com/2018/12/16/Scientific-Internet-Access/"/>
    <id>http://githang.com/2018/12/16/Scientific-Internet-Access/</id>
    <published>2018-12-15T16:11:14.000Z</published>
    <updated>2018-12-15T16:11:14.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统&quot;&gt;&lt;a href=&quot;#系统&quot; class=&quot;headerlink&quot; title=&quot;系统&quot;&gt;&lt;/a&gt;系统&lt;/h1&gt;&lt;p&gt;在 bwh 上。&lt;/p&gt;
&lt;p&gt;使用的是 Centos 6 x86_64 devel。&lt;/p&gt;
&lt;p&gt;Ubuntu 16.04 在安装 python-pip 时，可能出现需要交互的界面，导致一直没有结果。而交互式 shell 在浏览器上又用不了（本机 Ubuntu, Firefox 和 Chrome 都试了）。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;安装-pip&quot;&gt;&lt;a href=&quot;#安装-pip&quot; class=&quot;headerlink&quot; title=&quot;安装 pip&quot;&gt;&lt;/a&gt;安装 pip&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install python-setuptools -y &amp;amp;&amp;amp; easy_install pip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因使用不了交互式 shell，所以需要加 &lt;code&gt;-y&lt;/code&gt; 参数，确认安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="科学上网" scheme="http://githang.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin泛型上界与扩展函数</title>
    <link href="http://githang.com/2018/12/11/Kotlin-Generic-Upper-Bound-And-Extension-Function/"/>
    <id>http://githang.com/2018/12/11/Kotlin-Generic-Upper-Bound-And-Extension-Function/</id>
    <published>2018-12-11T02:08:40.000Z</published>
    <updated>2018-12-11T02:08:40.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型场景&quot;&gt;&lt;a href=&quot;#泛型场景&quot; class=&quot;headerlink&quot; title=&quot;泛型场景&quot;&gt;&lt;/a&gt;泛型场景&lt;/h1&gt;&lt;p&gt;先由我们熟悉的Java说起，有时在使用泛型的时候，会有这样的场景。&lt;br&gt;比如我们封装一个参数类，里面提供一个放入参数的方法，并且方法返回类型为它自身，以便调用时进行链式调用。&lt;/p&gt;
&lt;h2 id=&quot;泛型递归和链式调用&quot;&gt;&lt;a href=&quot;#泛型递归和链式调用&quot; class=&quot;headerlink&quot; title=&quot;泛型递归和链式调用&quot;&gt;&lt;/a&gt;泛型递归和链式调用&lt;/h2&gt;&lt;p&gt;为了让它的子类在调用时也返回它自身，我们定义一个泛型继承于它，并且返回值为这个泛型。如下：&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>AndroidManifest 权限</title>
    <link href="http://githang.com/2018/12/10/AndroidManifest-Permissions/"/>
    <id>http://githang.com/2018/12/10/AndroidManifest-Permissions/</id>
    <published>2018-12-10T03:42:23.000Z</published>
    <updated>2018-12-10T03:42:23.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在开发中，android lint 工具会提示以下几个权限只允许系统应用使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.permission.READ_LOGS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.permission.BATTERY_STATS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.permission.WRITE_SETTINGS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Dinny —— Android 界面跳转协议化</title>
    <link href="http://githang.com/2018/11/30/Dinny/"/>
    <id>http://githang.com/2018/11/30/Dinny/</id>
    <published>2018-11-30T01:34:13.000Z</published>
    <updated>2018-11-30T01:34:13.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码灾区？&quot;&gt;&lt;a href=&quot;#代码灾区？&quot; class=&quot;headerlink&quot; title=&quot;代码灾区？&quot;&gt;&lt;/a&gt;代码灾区？&lt;/h1&gt;&lt;p&gt;在我们 Android 开发中，不可避免的一个情景是在 Activity 跳转的时候传数据。比如从一个 FromActivity 界面，跳转到一个 OtherActivity 界面，需要传 &lt;code&gt;username&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt;，一般我们的写法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; intent = Intent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, OtherActivity::&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .putExtra(&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .putExtra(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.startActivity(intent)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但当随着应用的迭代，需要跳转的界面增加之后，上面的一些问题就会显露出来。比如有多个界面会跳转到这里的 OtherActivity 来，并且有些界面会需要再传个 &lt;code&gt;mobile&lt;/code&gt;，或者有的界面还需要一个 &lt;code&gt;sms_code&lt;/code&gt;，如果每个界面都把跳转所需要传的数据写在自己页面上，那么就很易发生两个问题：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="Activity" scheme="http://githang.com/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>我的 Mac 配置</title>
    <link href="http://githang.com/2018/11/21/Mac-Preferences/"/>
    <id>http://githang.com/2018/11/21/Mac-Preferences/</id>
    <published>2018-11-21T14:21:11.000Z</published>
    <updated>2019-01-14T13:05:46.602Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;iTerm + oh-my-zsh&lt;/strong&gt; 代替默认终端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alfred&lt;/strong&gt; 代替 Spotlight，修改其快捷键为 option + r&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.ci &#39;commit&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.co &#39;checkout&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.di &#39;diff&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.st &#39;status&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.mg &#39;merge&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.pl &#39;pull&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.ps &#39;push&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.pf &#39;push --force-with-lease&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d %Cgreen(%ci)%Creset %s %C(bold blue)&amp;lt;%aN&amp;gt;%Creset&#39; --abbrev-commit&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.reflg &quot;reflog --format=&#39;%C(auto)%h %&amp;lt;|(20)%gd %C(bold blue)%cr%C(reset) %gs&#39;&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ProGuard常见问题及解决套路</title>
    <link href="http://githang.com/2018/11/13/ProGuard-Common-Problems-And-Solutions/"/>
    <id>http://githang.com/2018/11/13/ProGuard-Common-Problems-And-Solutions/</id>
    <published>2018-11-13T05:51:43.000Z</published>
    <updated>2018-11-13T05:51:43.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ProGuard是一个压缩、优化和混淆Java字节码的工具，非常好用。本篇文章总结一下许多人在使用ProGuard时经常遇到的问题。&lt;/p&gt;
&lt;p&gt;我把在使用ProGuard时经常遇到的问题分为两类，分别是导致构建失败的编译时问题，以及构建通过但运行时崩溃或结果不正确的运行时问题。大多数人所遇到的大多数问题，都可以在下面的内容中找到对应的解决套路。&lt;br&gt;在开始讲这两类问题前，先明确一点：我们所说的添加混淆规则，不是指加入了才会混淆相关的类，相反，事实上，当你启用混淆之后，添加的一些诸如&lt;code&gt;-keep xxxx&lt;/code&gt;的规则才是起着不混淆的作用。&lt;br&gt;下面开始讲这两类问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="ProGuard" scheme="http://githang.com/tags/ProGuard/"/>
    
  </entry>
  
  <entry>
    <title>修改 Sonatype Nexus2 的 baseUrl</title>
    <link href="http://githang.com/2018/09/05/Change-Sonatype-Nexus2-Base-Url/"/>
    <id>http://githang.com/2018/09/05/Change-Sonatype-Nexus2-Base-Url/</id>
    <published>2018-09-05T06:10:52.000Z</published>
    <updated>2018-09-05T06:10:52.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;背景：&lt;br&gt;搭建 nexus 是使用的 sonatype 的官方 nexus docker 镜像，跑起来之后，发现访问路径带了 &lt;code&gt;/nexus&lt;/code&gt; 而不是 &lt;code&gt;/&lt;/code&gt;，于是想修改这个路径。&lt;/p&gt;
&lt;p&gt;尝试方法一：&lt;br&gt;以管理员账号登录，打开 &lt;strong&gt;Administration&lt;/strong&gt; 中的 &lt;strong&gt;Servier&lt;/strong&gt; 面板，修改 &lt;strong&gt;Application Server Settings&lt;/strong&gt; 里的 &lt;code&gt;Base URL&lt;/code&gt; 配置。&lt;br&gt;但发现无效。勾上 &lt;code&gt;Force Base URL&lt;/code&gt; 之后依然不起作用，仓库不加上 &lt;code&gt;/nexus&lt;/code&gt; 无法访问。&lt;br&gt;此处实际上修改的是 nexus 数据目录下的 &lt;code&gt;conf/nexus.xml&lt;/code&gt; 配置文件。&lt;br&gt;
    
    </summary>
    
      <category term="Nexus" scheme="http://githang.com/categories/Nexus/"/>
    
    
      <category term="nexus" scheme="http://githang.com/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>在 drawable 资源中使用属性引用的兼容问题</title>
    <link href="http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/"/>
    <id>http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/</id>
    <published>2018-08-21T06:52:03.000Z</published>
    <updated>2018-08-21T06:52:03.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在 Buly 崩溃分析里看到一个之前没见过的异常，异常信息为 &lt;code&gt;Can&amp;#39;t convert to color: type=0x2&lt;/code&gt;。详细日志如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.RuntimeException:Unable to start activity ComponentInfo&amp;#123;com.parkingwang.iop/com.parkingwang.iop.home.HomeActivity&amp;#125;: android.view.InflateException: Binary XML file line #79: Error inflating class TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2366)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.UnsupportedOperationException:Can&amp;apos;t convert to color: type=0x2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getColor(TypedArray.java:327)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.GradientDrawable.inflate(GradientDrawable.java:970)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXmlInner(Drawable.java:937)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXml(Drawable.java:877)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.Resources.loadDrawable(Resources.java:2206)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getDrawable(TypedArray.java:602)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.widget.TextView.&amp;lt;init&amp;gt;(TextView.java:854)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.support.v7.widget.AppCompatTextView.&amp;lt;init&amp;gt;(TbsSdkJava)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="颜色属性" scheme="http://githang.com/tags/%E9%A2%9C%E8%89%B2%E5%B1%9E%E6%80%A7/"/>
    
      <category term="兼容性" scheme="http://githang.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>感慨</title>
    <link href="http://githang.com/2018/08/18/Filling/"/>
    <id>http://githang.com/2018/08/18/Filling/</id>
    <published>2018-08-18T06:46:07.000Z</published>
    <updated>2018-08-18T06:46:07.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们以不同的方式在同一个地方共同地努力，却因为起跑线的不同而得到不同的结果。&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="随笔" scheme="http://githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://githang.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 多分支构建中的邮件配置</title>
    <link href="http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/"/>
    <id>http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/</id>
    <published>2018-08-15T15:42:50.000Z</published>
    <updated>2018-08-15T15:42:50.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的《Jenkins 多分支构建》解决了多分支项目的构建问题，但是却漏了一个问题，那就是邮件通知。&lt;br&gt;作为开发，我们的主要精力是集中在开发实现上，所以也不能每次推完代码之后都去等着看构建结果，我们需要在构建失败的时候，Jenkins 能够通知我们去处理，所以邮件配置是不可少的。&lt;br&gt;在简单的 Freestyle 项目中，我们可以进行如下配置：&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="email" scheme="http://githang.com/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>微知识#1 Kotlin 的 @JvmStatic 和 @JvmField 注解</title>
    <link href="http://githang.com/2018/08/12/Micro-Knowledge-1/"/>
    <id>http://githang.com/2018/08/12/Micro-Knowledge-1/</id>
    <published>2018-08-11T16:51:35.000Z</published>
    <updated>2018-08-11T16:51:35.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是关于 Java 静态方法和静态变量的一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestStatic&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; otherField = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BigInteger BIG_INTEGER = BigInteger.ONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;call method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们把它转换成 Kotlin 代码，会得到这样的结果：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>微知识#0 layoutInflater.inflate 方法的 ViewGroup 参数</title>
    <link href="http://githang.com/2018/08/10/Micro-Knowledge-0/"/>
    <id>http://githang.com/2018/08/10/Micro-Knowledge-0/</id>
    <published>2018-08-10T14:14:25.000Z</published>
    <updated>2018-08-10T14:14:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;LayoutInflater&lt;/code&gt; 常用的两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; attachToRoot)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个方法的调用如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inflate(resource, root, root != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在其实现中，第二个参数 &lt;code&gt;ViewGroup&lt;/code&gt; 类型的 &lt;code&gt;root&lt;/code&gt; 是否为空，会决定在从布局文件创建 &lt;code&gt;View&lt;/code&gt; 的时候，是否生成根元素的布局参数（即以 &lt;code&gt;layout_&lt;/code&gt; 开头的属性），关键代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
  </entry>
  
</feed>
