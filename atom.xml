<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疯狂的键盘</title>
  
  <subtitle>浩码农的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.githang.com/"/>
  <updated>2019-05-29T02:19:06.436Z</updated>
  <id>http://www.githang.com/</id>
  
  <author>
    <name>浩码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 向以前的文章添加id</title>
    <link href="http://www.githang.com/2019/05/28/add-post-id-to-existing-articles/"/>
    <id>http://www.githang.com/2019/05/28/add-post-id-to-existing-articles/</id>
    <published>2019-05-28T13:17:49.000Z</published>
    <updated>2019-05-29T02:19:06.436Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 博客的一些功能，比如评论，阅读数等，可能需要文章的唯一标识。Hexo 默认下没有 id，在之前，一般是用 url 作为这个标识。但是 url 是可能被改变的，所以就想增加一个 id 字段。使用 &lt;code&gt;hexo-incremental-id&lt;/code&gt; 插件可以解决这个问题，但是这个插件为以前的文章添加 id 时不是按时间顺序的，有些微强迫症的我难免不大愿意，于是就想自己解决，为以前的文章按其时间顺序添加 id。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="id" scheme="http://www.githang.com/tags/id/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 添加 Vuukle 评论系统</title>
    <link href="http://www.githang.com/2019/05/22/hexo-yilia-vuukle/"/>
    <id>http://www.githang.com/2019/05/22/hexo-yilia-vuukle/</id>
    <published>2019-05-22T05:22:34.000Z</published>
    <updated>2019-05-29T00:43:23.039Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册并获取-API-key&quot;&gt;&lt;a href=&quot;#注册并获取-API-key&quot; class=&quot;headerlink&quot; title=&quot;注册并获取 API key&quot;&gt;&lt;/a&gt;注册并获取 API key&lt;/h2&gt;&lt;p&gt;先到 &lt;a href=&quot;https://vuukle.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vuukle.com/&lt;/a&gt; 上注册为 publisher。然后参考其&lt;a href=&quot;https://docs.vuukle.com/how-to-embed-vuukle-2.0-via-js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;获取自己的 API key。&lt;/p&gt;
&lt;h2 id=&quot;修改-yilia-主题&quot;&gt;&lt;a href=&quot;#修改-yilia-主题&quot; class=&quot;headerlink&quot; title=&quot;修改 yilia 主题&quot;&gt;&lt;/a&gt;修改 yilia 主题&lt;/h2&gt;&lt;p&gt;接下来步骤还是如前面的博客，如下：&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://www.githang.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 添加 intensedebate 评论系统</title>
    <link href="http://www.githang.com/2019/05/22/hexo-yilia-intensedebate/"/>
    <id>http://www.githang.com/2019/05/22/hexo-yilia-intensedebate/</id>
    <published>2019-05-22T03:18:16.000Z</published>
    <updated>2019-05-29T00:42:40.792Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注册并获取代码&quot;&gt;&lt;a href=&quot;#注册并获取代码&quot; class=&quot;headerlink&quot; title=&quot;注册并获取代码&quot;&gt;&lt;/a&gt;注册并获取代码&lt;/h2&gt;&lt;p&gt;首先到 &lt;a href=&quot;https://intensedebate.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://intensedebate.com/&lt;/a&gt; 注册账号。&lt;/p&gt;
&lt;p&gt;然后登录进去，在主面板点击右侧的 &lt;code&gt;Install IntenseDebate&lt;/code&gt;，如下：&lt;br&gt;&lt;img src=&quot;http://upyun.githang.com/2019/05/22/15584958113348.jpg!w1000&quot; alt=&quot;主面板&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://www.githang.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 主题添加 valine 评论系统</title>
    <link href="http://www.githang.com/2019/05/22/hexo-yilia-valine/"/>
    <id>http://www.githang.com/2019/05/22/hexo-yilia-valine/</id>
    <published>2019-05-22T02:50:39.000Z</published>
    <updated>2019-05-29T00:42:28.001Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文仅讨论在 yila 中所增加或修改的代码，有关 leancloud 的申请及配置，请参考我所参考的两篇博文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhx2994.github.io/2018/10/16/Hexo-yilia%E4%B8%BB%E9%A2%98-%E6%B7%BB%E5%8A%A0valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Hexo yilia主题 添加valine评论系统》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://deserts.io/diy-a-comment-system/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Valine: 独立博客评论系统》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-主题配置文件添加-valine-相关配置&quot;&gt;&lt;a href=&quot;#1-主题配置文件添加-valine-相关配置&quot; class=&quot;headerlink&quot; title=&quot;1. 主题配置文件添加 valine 相关配置&quot;&gt;&lt;/a&gt;1. 主题配置文件添加 valine 相关配置&lt;/h2&gt;&lt;p&gt;修改 hexo 博客目录的 &lt;code&gt;theme/yilia&lt;/code&gt; 中的 &lt;code&gt;_config.yml&lt;/code&gt; 文件，增加如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#8、Valine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;valine:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt; appid:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#Leancloud应用的appId&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt; appkey:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#Leancloud应用的appKey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt; verify:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#验证码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt; notify:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#评论回复提醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt; placeholder:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;有话要说？&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#评论框占位符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://www.githang.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 主题添加 widgetpack 评论系统</title>
    <link href="http://www.githang.com/2019/05/22/hexo-yilia-widgetpack/"/>
    <id>http://www.githang.com/2019/05/22/hexo-yilia-widgetpack/</id>
    <published>2019-05-21T16:29:52.000Z</published>
    <updated>2019-05-28T13:14:12.447Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;修改方法与上篇相似，如下：&lt;/p&gt;
&lt;h2 id=&quot;1-主题配置添加-widgetpack&quot;&gt;&lt;a href=&quot;#1-主题配置添加-widgetpack&quot; class=&quot;headerlink&quot; title=&quot;1. 主题配置添加 widgetpack&quot;&gt;&lt;/a&gt;1. 主题配置添加 widgetpack&lt;/h2&gt;&lt;p&gt;修改 hexo 博客目录的 &lt;code&gt;theme/yilia&lt;/code&gt; 中的 &lt;code&gt;_config.yml&lt;/code&gt; 文件，增加如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# widgetpack。将 false 改为 widgetpack 上的 id 则启用该评论系统。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;widgetpack:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://www.githang.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>Hexo yilia 主题添加来必力评论系统</title>
    <link href="http://www.githang.com/2019/05/21/hexo-yilia-livere/"/>
    <id>http://www.githang.com/2019/05/21/hexo-yilia-livere/</id>
    <published>2019-05-21T08:56:56.000Z</published>
    <updated>2019-05-28T13:14:12.435Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-主题配置添加来必力&quot;&gt;&lt;a href=&quot;#1-主题配置添加来必力&quot; class=&quot;headerlink&quot; title=&quot;1. 主题配置添加来必力&quot;&gt;&lt;/a&gt;1. 主题配置添加来必力&lt;/h2&gt;&lt;p&gt;修改 hexo 博客目录的 &lt;code&gt;theme/yilia&lt;/code&gt; 中的 &lt;code&gt;_config.yml&lt;/code&gt; 文件，增加如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# livere 来必力。将 false 改为自己的uid则启用该评论系统。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;livere_uid:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://www.githang.com/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>码农故事2——岁前落脚得安定 年后求职寻转机</title>
    <link href="http://www.githang.com/2019/05/08/coder-stories-2/"/>
    <id>http://www.githang.com/2019/05/08/coder-stories-2/</id>
    <published>2019-05-08T11:26:24.000Z</published>
    <updated>2019-05-28T13:14:12.423Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;　　杨东想着要不给师兄发个信息，先搬回去。但桃子有自己的主张，说，要不先出去找找看有没房，如果找不到，晚上就先把行李搬她宿舍去。杨东没同意，但半天时间找到合适的房子搬出去他却觉得实在渺茫。他也没有马上反驳，因为他也没有其他良策。两人谋决未断，但此刻似乎老天关照，没有让窘境继续困扰他们。当天下午，桃子的朋友给他们俩带来了好消息。原来春节将至，退租较多，戴马他们搬过去的那幢楼正好有间单房空了出来，就问他们要不要搬过去，那里比这边大不少，环境也好得多。有前车之鉴，杨东和桃子决定先跟他们去实地考察，签好合同再搬。&lt;br&gt;
    
    </summary>
    
      <category term="码农故事" scheme="http://www.githang.com/categories/%E7%A0%81%E5%86%9C%E6%95%85%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>码农故事1——受惠寄居遇驴友 维艰窘境见人心</title>
    <link href="http://www.githang.com/2019/03/28/coder-stories-1/"/>
    <id>http://www.githang.com/2019/03/28/coder-stories-1/</id>
    <published>2019-03-27T16:10:14.000Z</published>
    <updated>2019-05-28T13:14:12.411Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　　入行六年，按一万小时计算，于所涉及领域不说精通，但也算得上是小有心得了。近半年来，领略多门语言设计，又泛读些许杂书，贯通了以往不少不解知识，而初窥所学本质。本该继续深研，但或许是爱一行做一行，做一行而恨一行吧，一个多月以来的经历，让我领悟了不少技术之外的道理，看开了以前所执着之事，既如此，提前散了也罢。诸多感慨不必多说，且看故事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　2013年1月，深圳的白石龙还是关外的一处荒凉之地。杨东左手拉着18寸的行李包右手拖着大布袋出了地铁口的扶梯，放眼望去，眼前是人烟稀少的道路，偶尔有车驰过，扬起一片尘灰，宽阔的马路对面，是一片片规整的七八层楼高的楼房。杨东跟着苏师兄去他的屋子。此时的杨东还未毕业，在学校之时曾表示要去深圳想寻求依靠，于是社团里的苏师兄便找到了他，让他先来这里住几天。&lt;br&gt;
    
    </summary>
    
      <category term="码农故事" scheme="http://www.githang.com/categories/%E7%A0%81%E5%86%9C%E6%95%85%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>背包、队列和栈</title>
    <link href="http://www.githang.com/2019/01/30/bag-queue-stack/"/>
    <id>http://www.githang.com/2019/01/30/bag-queue-stack/</id>
    <published>2019-01-30T01:30:38.000Z</published>
    <updated>2019-05-28T13:14:12.400Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文内容为《算法》第4版学习笔记。&lt;/p&gt;
&lt;h2 id=&quot;背包&quot;&gt;&lt;a href=&quot;#背包&quot; class=&quot;headerlink&quot; title=&quot;背包&quot;&gt;&lt;/a&gt;背包&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;背包&lt;/strong&gt;是一种不支持从中删除元素的集合数据类型——它的目的就是帮助用例收集元素并迭代遍历所有收集到的元素（用例也可以检查背包是否为空或者获取背包中元素的数量）。迭代的顺序不确定且与用例无关。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.githang.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.githang.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins之自动生成Sophix热修复补丁</title>
    <link href="http://www.githang.com/2019/01/29/jenkins-hotfix-patch/"/>
    <id>http://www.githang.com/2019/01/29/jenkins-hotfix-patch/</id>
    <published>2019-01-29T02:48:03.000Z</published>
    <updated>2019-05-28T13:14:12.379Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客是《&lt;a href=&quot;https://www.githang.com/2019/01/23/jenkins-enhanced/&quot;&gt;Jenkins之自动进行360加固&lt;/a&gt;》的后续。在分享完如何使用Jenkins实现自动加固后，本篇博客将继续分享使用Jenkins自动生成热修复补丁的实现过程。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Jenkins" scheme="http://www.githang.com/tags/Jenkins/"/>
    
      <category term="热修复" scheme="http://www.githang.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="Sophix" scheme="http://www.githang.com/tags/Sophix/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins之自动进行360加固</title>
    <link href="http://www.githang.com/2019/01/23/jenkins-enhanced/"/>
    <id>http://www.githang.com/2019/01/23/jenkins-enhanced/</id>
    <published>2019-01-23T07:31:05.000Z</published>
    <updated>2019-05-28T13:14:12.363Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;项目中使用到了360加固与阿里的热修复方案，以前是人工去操作加固或生成补丁包，比较浪费开发人员的时间，并且在我的电脑上每次命令行执行完全量编译都会卡很久。前段时间项目不紧，所以抽时间完成了在Jenkins流水线上进行360加固与生成热修复补丁的步骤。本文主要介绍实现Jenkins上进行自动加固的过程。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Jenkins" scheme="http://www.githang.com/tags/Jenkins/"/>
    
      <category term="360加固" scheme="http://www.githang.com/tags/360%E5%8A%A0%E5%9B%BA/"/>
    
  </entry>
  
  <entry>
    <title>面试随想</title>
    <link href="http://www.githang.com/2019/01/18/interview-thinking-depth/"/>
    <id>http://www.githang.com/2019/01/18/interview-thinking-depth/</id>
    <published>2019-01-18T15:39:37.000Z</published>
    <updated>2019-05-28T13:14:12.346Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;周四在我的QQ群里，谈到了昨天面试的事情，引发了我后续的一些思考，所以写此文章。文中内容仅代表我此刻观点，也许并不成熟，浅薄之见权当抛砖引玉。&lt;/p&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://www.githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="面试" scheme="http://www.githang.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkinsfile的pipeline配置</title>
    <link href="http://www.githang.com/2019/01/16/Jenkinsfile-pipeline/"/>
    <id>http://www.githang.com/2019/01/16/Jenkinsfile-pipeline/</id>
    <published>2019-01-16T01:47:08.000Z</published>
    <updated>2019-05-28T13:14:12.330Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我之前的博客《&lt;a href=&quot;http://www.githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/&quot;&gt;Jenkins 多分支构建&lt;/a&gt;》及《&lt;a href=&quot;http://www.githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/&quot;&gt;Jenkins 多分支构建中的邮件配置&lt;/a&gt;》探索了在多分支构建中Jenkinsfile的配置。然而在我的配置中，根节点为&lt;code&gt;node&lt;/code&gt;，但里面却没有使用Jenkinsfile的DSL去声明构建的流程，而是通过groovy代码去实现整个的构建逻辑，用&lt;code&gt;try-catch&lt;/code&gt;处理构建失败的问题，看起来很混乱。并且，整个构建本来有拉取并检出代码、构建、发布这几个阶段，但是在Jenkinsfile里却没有体现出来，所以当发现构建较慢时也不利于定位问题所在的步骤。本篇文章将完全处理这些问题。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Jenkins" scheme="http://www.githang.com/tags/Jenkins/"/>
    
      <category term="Pipeline" scheme="http://www.githang.com/tags/Pipeline/"/>
    
      <category term="Jenkinsfile" scheme="http://www.githang.com/tags/Jenkinsfile/"/>
    
  </entry>
  
  <entry>
    <title>从Java角度学Kotlin[0]=开篇</title>
    <link href="http://www.githang.com/2019/01/11/kotlin-0/"/>
    <id>http://www.githang.com/2019/01/11/kotlin-0/</id>
    <published>2019-01-11T09:21:34.000Z</published>
    <updated>2019-05-28T13:14:12.317Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Kotlin，是由JetBrains开发的一种在Java虚拟机上运行的静态类型编程语言……&lt;br&gt;关于Kotlin的背景，看到这篇文章的你想必在其他地方已多次看到介绍，这里就不赘述了。&lt;br&gt;阅前须知：本系列文章需要一定的Java基础知识，并且所举的例子可能会包含些Android上的代码，比较适合之前使用Java从事Android开发的朋友。&lt;br&gt;下面进入正题。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://www.githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://www.githang.com/tags/Kotlin/"/>
    
      <category term="Kotlin走起" scheme="http://www.githang.com/tags/Kotlin%E8%B5%B0%E8%B5%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何编写优雅的代码</title>
    <link href="http://www.githang.com/2019/01/04/how-to-write-elegant-code/"/>
    <id>http://www.githang.com/2019/01/04/how-to-write-elegant-code/</id>
    <published>2019-01-04T09:04:05.000Z</published>
    <updated>2019-05-28T13:14:12.304Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我对优雅的代码的理解是：遵守规范，逻辑清晰，严谨可靠，化繁为简。本文分享我对写代码的一些思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;代码首先是写给人看的，其次才是计算机顺便能够运行&quot;&gt;&lt;a href=&quot;#代码首先是写给人看的，其次才是计算机顺便能够运行&quot; class=&quot;headerlink&quot; title=&quot;代码首先是写给人看的，其次才是计算机顺便能够运行&quot;&gt;&lt;/a&gt;代码首先是写给人看的，其次才是计算机顺便能够运行&lt;/h2&gt;&lt;p&gt;在讨论关于如何编写优雅代码的观点之前，先抛出个问题，希望我们对这一点能够达成共识：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么要编写优雅的代码？&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://www.githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="代码" scheme="http://www.githang.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>2018年总结</title>
    <link href="http://www.githang.com/2019/01/01/summary-of-2018/"/>
    <id>http://www.githang.com/2019/01/01/summary-of-2018/</id>
    <published>2019-01-01T04:17:11.000Z</published>
    <updated>2019-05-28T13:14:12.284Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;没有完成的计划&quot;&gt;&lt;a href=&quot;#没有完成的计划&quot; class=&quot;headerlink&quot; title=&quot;没有完成的计划&quot;&gt;&lt;/a&gt;没有完成的计划&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;编程语言学习。依然没有完成2018年所设想的2017年所计划的在2016年没有完成的2015年所定下的学习Python的目标。另外，Kotlin语言用起来总体感觉很爽，如果说有什么不爽的地方，那大概是在写反射代码的时候了。&lt;/li&gt;
&lt;li&gt;运动。由于生病的原因，不但2018年没能成功继续运动，接下来的半年也无法进行运动，很遗憾。希望能早点恢复之前状态。&lt;/li&gt;
&lt;li&gt;交流语言学习。粤语学习依旧半途而废。&lt;/li&gt;
&lt;li&gt;电话。还得多多自我督促。&lt;/li&gt;
&lt;li&gt;回家。经济压力之大，竟连出远门的钱也似乎腾不出了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来是新篇。&lt;br&gt;
    
    </summary>
    
      <category term="杂文" scheme="http://www.githang.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>我为什么放弃在项目中使用Data Binding</title>
    <link href="http://www.githang.com/2018/12/25/why-do-i-discard-data-binding-in-project/"/>
    <id>http://www.githang.com/2018/12/25/why-do-i-discard-data-binding-in-project/</id>
    <published>2018-12-25T05:30:30.000Z</published>
    <updated>2019-05-28T13:12:33.861Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我是怎么开始去使用它的&quot;&gt;&lt;a href=&quot;#我是怎么开始去使用它的&quot; class=&quot;headerlink&quot; title=&quot;我是怎么开始去使用它的&quot;&gt;&lt;/a&gt;我是怎么开始去使用它的&lt;/h1&gt;&lt;h2 id=&quot;开始使用它的原因&quot;&gt;&lt;a href=&quot;#开始使用它的原因&quot; class=&quot;headerlink&quot; title=&quot;开始使用它的原因&quot;&gt;&lt;/a&gt;开始使用它的原因&lt;/h2&gt;&lt;p&gt;Data Binding出现也有几年了，一直没有去用它的主要原因是它的写法让我觉得会把业务逻辑与界面过度耦合在一起。但前段时间还是试用了一下。&lt;/p&gt;
&lt;p&gt;会想去用它一共有四个原因。&lt;br&gt;一是说到底没有用过，感觉如果与他人讨论到它难免有空谈的心虚感，&lt;strong&gt;毕竟一项技术是好是坏还是使用过后再去评论比较有底气&lt;/strong&gt;。&lt;br&gt;二是想先引入Data Binding，再在项目中结合它尝试MVVM模式，毕竟Data Binding的使用方式看起来与MVVM相当的切合。
    
    </summary>
    
      <category term="Android" scheme="http://www.githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.githang.com/tags/Android/"/>
    
      <category term="DataBinding" scheme="http://www.githang.com/tags/DataBinding/"/>
    
  </entry>
  
  <entry>
    <title>如何在Hexo中对文章md文件分类</title>
    <link href="http://www.githang.com/2018/12/22/hexo-new-post-path/"/>
    <id>http://www.githang.com/2018/12/22/hexo-new-post-path/</id>
    <published>2018-12-22T04:57:21.000Z</published>
    <updated>2019-05-28T13:12:33.848Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一个快速、简洁且高效的博客框架，常用在Github Page上部署个人博客。&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;在默认配置下，我们使用&lt;code&gt;hexo new post [title]&lt;/code&gt;会在&lt;code&gt;source/_post/&lt;/code&gt;目录下生成对应的markdown文件，而使用&lt;code&gt;hexo g&lt;/code&gt;生成的html文件路径是&lt;code&gt;:year/:month/:day/:title.html&lt;/code&gt;。当我们写的博客越来越多的时候，会发现，所有文章都是在&lt;code&gt;source/_post/&lt;/code&gt;下，查找起来会不大方便，而希望对它进行一个分类，但是在生成的文章链接上保持不变。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://www.githang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>统计项目中的代码有多少行是你贡献的</title>
    <link href="http://www.githang.com/2018/12/21/Git-Contribution-Statistics/"/>
    <id>http://www.githang.com/2018/12/21/Git-Contribution-Statistics/</id>
    <published>2018-12-21T02:03:01.000Z</published>
    <updated>2019-05-28T13:12:33.836Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇内容仅对 Linux/Mac 友好，Windows 开发者请勿介意。&lt;/p&gt;
&lt;p&gt;在一个有多人参与过的项目中，不知道其他人有没有和我一样会去想：当前这个项目有多少行代码是我写的，有多少行代码是其他人写的？&lt;/p&gt;
&lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;p&gt;我们知道，&lt;code&gt;git blame&lt;/code&gt; 的命令可以查看一个文件的每一行代码的最终修改者，如下：&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://www.githang.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>读《高效15法则》</title>
    <link href="http://www.githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/"/>
    <id>http://www.githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/</id>
    <published>2018-12-18T06:59:07.000Z</published>
    <updated>2019-05-28T13:12:33.824Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《高效15法则》是我大概五个月前读的一本讲时间管理的书。如果你也有和我一样困惑于掌控自己的时间精力时，建议也看一看有关时间管理或精力管理的书，其中《高效15法则》这本书是我觉得讲得还很不错的。&lt;/p&gt;
&lt;p&gt;15条法则总结如下：&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="读书" scheme="http://www.githang.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
</feed>
