<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>疯狂的键盘</title>
  
  <subtitle>浩码农的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://githang.com/"/>
  <updated>2018-12-21T03:25:16.050Z</updated>
  <id>http://githang.com/</id>
  
  <author>
    <name>浩码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>统计项目中的代码有多少行是你贡献的</title>
    <link href="http://githang.com/2018/12/21/Git-Contribution-Statistics/"/>
    <id>http://githang.com/2018/12/21/Git-Contribution-Statistics/</id>
    <published>2018-12-21T02:03:01.000Z</published>
    <updated>2018-12-21T03:25:16.050Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇内容仅对 Linux/Mac 友好，Windows 开发者请勿介意。&lt;/p&gt;
&lt;p&gt;在一个有多人参与过的项目中，不知道其他人有没有和我一样会去想：当前这个项目有多少行代码是我写的，有多少行代码是其他人写的？&lt;/p&gt;
&lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;p&gt;我们知道，&lt;code&gt;git blame&lt;/code&gt; 的命令可以查看一个文件的每一行代码的最终修改者，如下：&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://githang.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://githang.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>读《高效15法则》</title>
    <link href="http://githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/"/>
    <id>http://githang.com/2018/12/18/Read-15-Secrets-Successful-People-Know-About-Time-Management/</id>
    <published>2018-12-18T06:59:07.000Z</published>
    <updated>2018-12-18T07:50:04.067Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《高效15法则》是我大概五个月前读的一本讲时间管理的书。如果你也有和我一样困惑于掌控自己的时间精力时，建议也看一看有关时间管理或精力管理的书，其中《高效15法则》这本书是我觉得讲得还很不错的。&lt;/p&gt;
&lt;p&gt;15条法则总结如下：&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="读书" scheme="http://githang.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Scientific Internet Access</title>
    <link href="http://githang.com/2018/12/16/Scientific-Internet-Access/"/>
    <id>http://githang.com/2018/12/16/Scientific-Internet-Access/</id>
    <published>2018-12-15T16:11:14.000Z</published>
    <updated>2018-12-15T23:21:22.332Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统&quot;&gt;&lt;a href=&quot;#系统&quot; class=&quot;headerlink&quot; title=&quot;系统&quot;&gt;&lt;/a&gt;系统&lt;/h1&gt;&lt;p&gt;在 bwh 上。&lt;/p&gt;
&lt;p&gt;使用的是 Centos 6 x86_64 devel。&lt;/p&gt;
&lt;p&gt;Ubuntu 16.04 在安装 python-pip 时，可能出现需要交互的界面，导致一直没有结果。而交互式 shell 在浏览器上又用不了（本机 Ubuntu, Firefox 和 Chrome 都试了）。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;安装-pip&quot;&gt;&lt;a href=&quot;#安装-pip&quot; class=&quot;headerlink&quot; title=&quot;安装 pip&quot;&gt;&lt;/a&gt;安装 pip&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install python-setuptools -y &amp;amp;&amp;amp; easy_install pip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因使用不了交互式 shell，所以需要加 &lt;code&gt;-y&lt;/code&gt; 参数，确认安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="科学上网" scheme="http://githang.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin泛型上界与扩展函数</title>
    <link href="http://githang.com/2018/12/11/Kotlin-Generic-Upper-Bound-And-Extension-Function/"/>
    <id>http://githang.com/2018/12/11/Kotlin-Generic-Upper-Bound-And-Extension-Function/</id>
    <published>2018-12-11T02:08:40.000Z</published>
    <updated>2018-12-11T06:04:04.122Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型场景&quot;&gt;&lt;a href=&quot;#泛型场景&quot; class=&quot;headerlink&quot; title=&quot;泛型场景&quot;&gt;&lt;/a&gt;泛型场景&lt;/h1&gt;&lt;p&gt;先由我们熟悉的Java说起，有时在使用泛型的时候，会有这样的场景。&lt;br&gt;比如我们封装一个参数类，里面提供一个放入参数的方法，并且方法返回类型为它自身，以便调用时进行链式调用。&lt;/p&gt;
&lt;h2 id=&quot;泛型递归和链式调用&quot;&gt;&lt;a href=&quot;#泛型递归和链式调用&quot; class=&quot;headerlink&quot; title=&quot;泛型递归和链式调用&quot;&gt;&lt;/a&gt;泛型递归和链式调用&lt;/h2&gt;&lt;p&gt;为了让它的子类在调用时也返回它自身，我们定义一个泛型继承于它，并且返回值为这个泛型。如下：&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>AndroidManifest 权限</title>
    <link href="http://githang.com/2018/12/10/AndroidManifest-Permissions/"/>
    <id>http://githang.com/2018/12/10/AndroidManifest-Permissions/</id>
    <published>2018-12-10T03:42:23.000Z</published>
    <updated>2018-12-10T08:10:21.912Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在开发中，android lint 工具会提示以下几个权限只允许系统应用使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android.permission.READ_LOGS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.permission.BATTERY_STATS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;android.permission.WRITE_SETTINGS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Dinny —— Android 界面跳转协议化</title>
    <link href="http://githang.com/2018/11/30/Dinny/"/>
    <id>http://githang.com/2018/11/30/Dinny/</id>
    <published>2018-11-30T01:34:13.000Z</published>
    <updated>2018-11-30T03:03:24.386Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码灾区？&quot;&gt;&lt;a href=&quot;#代码灾区？&quot; class=&quot;headerlink&quot; title=&quot;代码灾区？&quot;&gt;&lt;/a&gt;代码灾区？&lt;/h1&gt;&lt;p&gt;在我们 Android 开发中，不可避免的一个情景是在 Activity 跳转的时候传数据。比如从一个 FromActivity 界面，跳转到一个 OtherActivity 界面，需要传 &lt;code&gt;username&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt;，一般我们的写法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; intent = Intent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, OtherActivity::&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;java&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .putExtra(&lt;span class=&quot;string&quot;&gt;&quot;username&quot;&lt;/span&gt;, username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .putExtra(&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;, password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.startActivity(intent)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但当随着应用的迭代，需要跳转的界面增加之后，上面的一些问题就会显露出来。比如有多个界面会跳转到这里的 OtherActivity 来，并且有些界面会需要再传个 &lt;code&gt;mobile&lt;/code&gt;，或者有的界面还需要一个 &lt;code&gt;sms_code&lt;/code&gt;，如果每个界面都把跳转所需要传的数据写在自己页面上，那么就很易发生两个问题：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="Activity" scheme="http://githang.com/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>我的 Mac 配置</title>
    <link href="http://githang.com/2018/11/21/Mac-Preferences/"/>
    <id>http://githang.com/2018/11/21/Mac-Preferences/</id>
    <published>2018-11-21T14:21:11.000Z</published>
    <updated>2018-12-10T02:30:17.166Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;iTerm + oh-my-zsh&lt;/strong&gt; 代替默认终端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alfred&lt;/strong&gt; 代替 Spotlight，修改其快捷键为 option + r&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.ci &#39;commit&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.co &#39;checkout&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.di &#39;diff&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.st &#39;status&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.mg &#39;merge&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.pl &#39;pull&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.ps &#39;push&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.pf &#39;push --force-with-lease&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d %Cgreen(%ci)%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global alias.reflg &quot;reflog --format=&#39;%C(auto)%h %&amp;lt;|(20)%gd %C(bold blue)%cr%C(reset) %gs&#39;&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ProGuard常见问题及解决套路</title>
    <link href="http://githang.com/2018/11/13/ProGuard-Common-Problems-And-Solutions/"/>
    <id>http://githang.com/2018/11/13/ProGuard-Common-Problems-And-Solutions/</id>
    <published>2018-11-13T05:51:43.000Z</published>
    <updated>2018-11-14T01:54:57.185Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ProGuard是一个压缩、优化和混淆Java字节码的工具，非常好用。本篇文章总结一下许多人在使用ProGuard时经常遇到的问题。&lt;/p&gt;
&lt;p&gt;我把在使用ProGuard时经常遇到的问题分为两类，分别是导致构建失败的编译时问题，以及构建通过但运行时崩溃或结果不正确的运行时问题。大多数人所遇到的大多数问题，都可以在下面的内容中找到对应的解决套路。&lt;br&gt;在开始讲这两类问题前，先明确一点：我们所说的添加混淆规则，不是指加入了才会混淆相关的类，相反，事实上，当你启用混淆之后，添加的一些诸如&lt;code&gt;-keep xxxx&lt;/code&gt;的规则才是起着不混淆的作用。&lt;br&gt;下面开始讲这两类问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="ProGuard" scheme="http://githang.com/tags/ProGuard/"/>
    
  </entry>
  
  <entry>
    <title>修改 Sonatype Nexus2 的 baseUrl</title>
    <link href="http://githang.com/2018/09/05/Change-Sonatype-Nexus2-Base-Url/"/>
    <id>http://githang.com/2018/09/05/Change-Sonatype-Nexus2-Base-Url/</id>
    <published>2018-09-05T06:10:52.000Z</published>
    <updated>2018-09-05T06:31:25.743Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;背景：&lt;br&gt;搭建 nexus 是使用的 sonatype 的官方 nexus docker 镜像，跑起来之后，发现访问路径带了 &lt;code&gt;/nexus&lt;/code&gt; 而不是 &lt;code&gt;/&lt;/code&gt;，于是想修改这个路径。&lt;/p&gt;
&lt;p&gt;尝试方法一：&lt;br&gt;以管理员账号登录，打开 &lt;strong&gt;Administration&lt;/strong&gt; 中的 &lt;strong&gt;Servier&lt;/strong&gt; 面板，修改 &lt;strong&gt;Application Server Settings&lt;/strong&gt; 里的 &lt;code&gt;Base URL&lt;/code&gt; 配置。&lt;br&gt;但发现无效。勾上 &lt;code&gt;Force Base URL&lt;/code&gt; 之后依然不起作用，仓库不加上 &lt;code&gt;/nexus&lt;/code&gt; 无法访问。&lt;br&gt;此处实际上修改的是 nexus 数据目录下的 &lt;code&gt;conf/nexus.xml&lt;/code&gt; 配置文件。&lt;br&gt;
    
    </summary>
    
      <category term="Nexus" scheme="http://githang.com/categories/Nexus/"/>
    
    
      <category term="nexus" scheme="http://githang.com/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>在 drawable 资源中使用属性引用的兼容问题</title>
    <link href="http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/"/>
    <id>http://githang.com/2018/08/21/Incompatibility-Problem-About-Attribute-Reference-In-Drawable/</id>
    <published>2018-08-21T06:52:03.000Z</published>
    <updated>2018-08-22T01:55:45.242Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在 Buly 崩溃分析里看到一个之前没见过的异常，异常信息为 &lt;code&gt;Can&amp;#39;t convert to color: type=0x2&lt;/code&gt;。详细日志如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.RuntimeException:Unable to start activity ComponentInfo&amp;#123;com.parkingwang.iop/com.parkingwang.iop.home.HomeActivity&amp;#125;: android.view.InflateException: Binary XML file line #79: Error inflating class TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2366)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.UnsupportedOperationException:Can&amp;apos;t convert to color: type=0x2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getColor(TypedArray.java:327)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.GradientDrawable.inflate(GradientDrawable.java:970)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXmlInner(Drawable.java:937)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.graphics.drawable.Drawable.createFromXml(Drawable.java:877)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.Resources.loadDrawable(Resources.java:2206)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.content.res.TypedArray.getDrawable(TypedArray.java:602)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.widget.TextView.&amp;lt;init&amp;gt;(TextView.java:854)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android.support.v7.widget.AppCompatTextView.&amp;lt;init&amp;gt;(TbsSdkJava)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="颜色属性" scheme="http://githang.com/tags/%E9%A2%9C%E8%89%B2%E5%B1%9E%E6%80%A7/"/>
    
      <category term="兼容性" scheme="http://githang.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>感慨</title>
    <link href="http://githang.com/2018/08/18/Filling/"/>
    <id>http://githang.com/2018/08/18/Filling/</id>
    <published>2018-08-18T06:46:07.000Z</published>
    <updated>2018-08-20T13:34:37.562Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;我们以不同的方式在同一个地方共同地努力，却因为起跑线的不同而得到不同的结果。&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="随笔" scheme="http://githang.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://githang.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 多分支构建中的邮件配置</title>
    <link href="http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/"/>
    <id>http://githang.com/2018/08/15/Jenkins-Multibranch-Pipeline-Email/</id>
    <published>2018-08-15T15:42:50.000Z</published>
    <updated>2018-08-17T03:40:27.838Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的《Jenkins 多分支构建》解决了多分支项目的构建问题，但是却漏了一个问题，那就是邮件通知。&lt;br&gt;作为开发，我们的主要精力是集中在开发实现上，所以也不能每次推完代码之后都去等着看构建结果，我们需要在构建失败的时候，Jenkins 能够通知我们去处理，所以邮件配置是不可少的。&lt;br&gt;在简单的 Freestyle 项目中，我们可以进行如下配置：&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="email" scheme="http://githang.com/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>微知识#1 Kotlin 的 @JvmStatic 和 @JvmField 注解</title>
    <link href="http://githang.com/2018/08/12/Micro-Knowledge-1/"/>
    <id>http://githang.com/2018/08/12/Micro-Knowledge-1/</id>
    <published>2018-08-11T16:51:35.000Z</published>
    <updated>2018-08-15T02:16:56.811Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这是关于 Java 静态方法和静态变量的一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestStatic&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; otherField = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BigInteger BIG_INTEGER = BigInteger.ONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;call method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们把它转换成 Kotlin 代码，会得到这样的结果：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>微知识#0 layoutInflater.inflate 方法的 ViewGroup 参数</title>
    <link href="http://githang.com/2018/08/10/Micro-Knowledge-0/"/>
    <id>http://githang.com/2018/08/10/Micro-Knowledge-0/</id>
    <published>2018-08-10T14:14:25.000Z</published>
    <updated>2018-08-11T07:21:37.568Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;LayoutInflater&lt;/code&gt; 常用的两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; attachToRoot)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个方法的调用如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@LayoutRes &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resource, @Nullable ViewGroup root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inflate(resource, root, root != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而在其实现中，第二个参数 &lt;code&gt;ViewGroup&lt;/code&gt; 类型的 &lt;code&gt;root&lt;/code&gt; 是否为空，会决定在从布局文件创建 &lt;code&gt;View&lt;/code&gt; 的时候，是否生成根元素的布局参数（即以 &lt;code&gt;layout_&lt;/code&gt; 开头的属性），关键代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="微知识" scheme="http://githang.com/categories/%E5%BE%AE%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 多分支构建</title>
    <link href="http://githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/"/>
    <id>http://githang.com/2018/08/09/Jenkins-Multibranch-Pipeline/</id>
    <published>2018-08-09T07:22:57.000Z</published>
    <updated>2018-12-16T15:41:47.311Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天终于搞定了 Jenkins 的多分支构建的配置。&lt;/p&gt;
&lt;p&gt;以前在使用 gitlab-ci 时，可以根据不同的分支执行不同的构建，比如 release 分支执行发布到 fir 上的构建，其他分支只执行编译。但因为服务器上的 4G 内存还要跑其他服务，而 gitlab 又是个耗内存大户，经常报 5xx 错误而不得不重启（我后来不得不使用 cron 设置了隔几天自动重启的定时任务）。之后想起了一个 go 开发的 git 托管服务 gogs，于是老大把它给部署上，将项目从 gitlab 上迁移过来。&lt;br&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="http://githang.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="http://githang.com/tags/Jenkins/"/>
    
      <category term="Pipeline" scheme="http://githang.com/tags/Pipeline/"/>
    
      <category term="Multibranch" scheme="http://githang.com/tags/Multibranch/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Java 互通指南</title>
    <link href="http://githang.com/2018/08/06/Kotlin-Java-Interop-Guide/"/>
    <id>http://githang.com/2018/08/06/Kotlin-Java-Interop-Guide/</id>
    <published>2018-08-06T14:06:22.000Z</published>
    <updated>2018-08-07T03:00:48.404Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://android.github.io/kotlin-guides/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Kotlin Guides&lt;/a&gt; 的 &lt;a href=&quot;https://android.github.io/kotlin-guides/interop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Interop Guide&lt;/a&gt;，翻译项目地址为：&lt;a href=&quot;https://github.com/msdx/kotlin-guides-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/msdx/kotlin-guides-cn&lt;/a&gt; ，欢迎关注及校正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一组关于使用 Java 和 Kotlin 语言编写公共 API 的规则，目的是让代码在其他语言使用时也会感到习惯。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更新于：2018-05-18&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
      <category term="Java" scheme="http://githang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Kotlin 风格指南</title>
    <link href="http://githang.com/2018/08/06/Android-Kotlin-Style-Guides/"/>
    <id>http://githang.com/2018/08/06/Android-Kotlin-Style-Guides/</id>
    <published>2018-08-06T01:45:47.000Z</published>
    <updated>2018-08-06T14:21:32.153Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://android.github.io/kotlin-guides/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Kotlin Guides&lt;/a&gt; 的 &lt;a href=&quot;https://android.github.io/kotlin-guides/style.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Style Guide&lt;/a&gt;，翻译项目地址为：&lt;a href=&quot;https://github.com/msdx/kotlin-guides-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/msdx/kotlin-guides-cn&lt;/a&gt; ，欢迎关注及校正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文档是 Google Android 编码标准的 Kotlin 代码标准。当且仅当一个 Kotlin 源文件符合这里的规则时，我们就称其为 Google Android 代码风格的源文件。&lt;/p&gt;
&lt;p&gt;与其他的编程风格指南一样，这里所涉及的问题不仅包括格式化的美观问题，也涉及了其他的约定及编码标准。但是，本文档主要关注我们普遍遵循的硬性规定，并避免给出不明确可执行（无论是通过人工还是工具）的建议。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;更新于：2018-05-18&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://githang.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://githang.com/tags/Kotlin/"/>
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="CodeStyle" scheme="http://githang.com/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>使用 Drawable 实现图标角标</title>
    <link href="http://githang.com/2018/06/22/BadgeDrawable/"/>
    <id>http://githang.com/2018/06/22/BadgeDrawable/</id>
    <published>2018-06-22T06:24:27.000Z</published>
    <updated>2018-07-28T00:15:47.435Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我在去年曾经写过一篇类似的《使用 Drawable 实现小红点》，但是小红点的具体实现是在这个类里面的。这次是在其思路上进行扩展，使得小红点或者说是角标的样式更加灵活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在一些图标的右上角添加小红点，是我们开发中很常见的场景，比如下图所示，底部 TAB 会有小红点，上面的功能图标也会有小红点。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="drawable" scheme="http://githang.com/tags/drawable/"/>
    
      <category term="角标" scheme="http://githang.com/tags/%E8%A7%92%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Phabricator 添加对 Kotlin 的语法高亮</title>
    <link href="http://githang.com/2018/05/15/Phabricator-Pygments-Kotlin-Syntax-Highlight/"/>
    <id>http://githang.com/2018/05/15/Phabricator-Pygments-Kotlin-Syntax-Highlight/</id>
    <published>2018-05-15T03:44:26.000Z</published>
    <updated>2018-05-15T12:06:44.459Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一直难以忍受在做 Code Review 时，Phabricator 无法对 kotlin 代码进行高亮显示，直到今天项目的阶段性开发终于告一段落进入测试，于是着手处理该问题。&lt;/p&gt;
&lt;p&gt;Phabricator 对语法高亮有两种支持方式，一种是其自带的高亮，还是一种是对 pygments 的集成。在 Phabricator 的设置界面上提到，如果想支持更多种语言的语法高亮，可以启用 pygments，于是我就配置为使用 pygments。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://githang.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Phabricator" scheme="http://githang.com/tags/Phabricator/"/>
    
  </entry>
  
  <entry>
    <title>皮肤包项目的 Gradle 脚本演化</title>
    <link href="http://githang.com/2018/04/11/The-Evolution-of-The-Gradle-Script-For-The-Skin-Library/"/>
    <id>http://githang.com/2018/04/11/The-Evolution-of-The-Gradle-Script-For-The-Skin-Library/</id>
    <published>2018-04-11T06:02:17.000Z</published>
    <updated>2018-04-11T23:37:25.037Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在做的一个项目需要有换肤功能，换肤的方案是采用第三方库 &lt;a href=&quot;https://github.com/burgessjp/ThemeSkinning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThemeSkinning&lt;/a&gt; 的实现（在其基础上修复若干 bug）。皮肤的制作是把相关的资源放在一个 app module 中打包成 apk，当然资源的命名要和原有项目中的命名一致。目前的皮肤加载方式，是把皮肤包放到 assets 中去加载。这是背景一。&lt;br&gt;背景二，这个项目是我所接手过来的。虽然表面上是使用了皮肤加载库，但是项目中还有大量遗留的没有使用皮肤库的写死的代码，都是判断当前主题是哪一个，然后返回默认资源或者是指定皮肤的资源。这些代码都类似如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://githang.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://githang.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://githang.com/tags/Gradle/"/>
    
  </entry>
  
</feed>
